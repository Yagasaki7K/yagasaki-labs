import config from './config.js';
import {
    ButtonBuilder,
    ButtonStyle,
    ActionRowBuilder,
    ModalBuilder,
    EmbedBuilder,
    TextInputBuilder,
    TextInputStyle,
    StringSelectMenuBuilder
} from 'discord.js';

export default {
    whitelist: {
        defaultMessage: {
            title: 'üìù Sistema de Allowlist - Sintonia S√£o Paulo',
            description: [
                'üìÑ Selecione uma das op√ß√µes abaixo para criar uma sala para enviar a sua **ALLOWLIST**.',
                '',
                '```üö® LEIA PARA PROSSEGUIR üö®```',
                'Assim que voc√™ terminar a sua ALLOWLIST, pedirei para voc√™ confirmar o envio dela, assim ela ser√° enviada para **AN√ÅLISE**. N√£o se preocupe se errar algo, pois voc√™ pode cancelar e come√ßar novamente se necess√°rio.',
                '',
                '**√â muito importante que voc√™ confirme o envio, caso contr√°rio, sua ALLOWLIST n√£o ser√° enviada para AN√ÅLISE.**',
                '',
                '```üìë Yagasaki7K```',
                'Voc√™ recebe acesso priorit√°rio √† an√°lise da sua Allowlist visitando o canal #desconhecido ou entrando em contato via ATENDIMENTO.'
            ].join('\n'),
            color: 0x2195e1,
            image: { url: config.whitelist.imageurl },
            footer: { text: 'Copyright ¬© 2025 - ByteOne Group - Todos os Direitos Reservados. Sintonia S√£o Paulo RP' }
        },
        waitResult: {
            embeds: [
                new EmbedBuilder()
                    .setDescription('Voc√™ j√° est√° em processo de an√°lise, aguarde at√© que o resultado seja informado.')
                    .setColor('#2f3136')
            ],
            ephemeral: true
        },
        rateLimit: {
            embeds: [
                new EmbedBuilder()
                    .setDescription('Existem muitas whitelists sendo feitas no momento, aguarde um momento...')
                    .setColor('#2f3136')
            ],
            ephemeral: true
        },
        finished: {
            title: '**Finalizando**',
            description: 'Estou computando suas respostas...\nAguarde, isso pode levar alguns segundos.',
            color: 0x2f3136
        },
        questionBuilder: (client, question) => ({
            title: `Pergunta ${question.id}/${config.whitelist.questions.length}`,
            description: question.question,
            color: 0x2f3136,
            author: {
                name: `üìù Allowlist - ${client.guilds.cache.get(config.idservidor.id).name}`,
                iconURL: client.user.avatarURL()
            }
        }),
        createChannel: (name, category, guild, member) => ({
            name: `üìÑ‚îÜallowlist-${name}`,
            parent: category,
            topic: 'Formul√°rio para whitelist',
            reason: 'Criando formul√°rio de whitelist',
            permissionOverwrites: [
                { id: member.id, allow: ['ViewChannel'], deny: ['SendMessages'] },
                { id: guild.roles.everyone.id, deny: ['ViewChannel'] }
            ]
        }),
        initWhitelist: (client, member) => ({
            content: `<@${member.id}>`,
            embeds: [
                new EmbedBuilder()
                    .setColor(0x2f3136)
                    .setAuthor({
                        name: `üìù Allowlist - ${client.guilds.cache.get(config.idservidor.id).name}`,
                        iconURL: client.user.avatarURL()
                    })
                    .setDescription([
                        'Aqui v√£o algumas dicas antes de iniciar sua **ALLOWLIST**:',
                        '',
                        'Voc√™ tem **5 minutos** para **iniciar a allowlist**, caso contr√°rio a **sala se fecha** e voc√™ ter√° que come√ßar novamente.',
                        '',
                        'Cada **RESPOSTA** tem o limite de **4000 CARACTERES** para quem **TEM NITRO** e **2000 CARACTERES** para quem **N√ÉO TEM NITRO**.',
                        'Se precisar ultrapassar, use **Pastebin** para enviar o link, apenas na pergunta que solicita a **HIST√ìRIA** do personagem.',
                        'Anexar **ARQUIVOS** ou **LINKS** em outras perguntas anular√° sua **ALLOWLIST**.',
                        '',
                        'Caso n√£o queira enviar sua **ALLOWLIST** para an√°lise, voc√™ pode **OPTAR** por **ENVIAR** ou **N√ÉO ENVIAR**.',
                        '',
                        '‚ùó **Este canal ser√° deletado 30 segundos ap√≥s o envio da sua allowlist**.'
                    ].join('\n'))
            ],
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId('init_whitelist')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üìù')
                        .setLabel('Iniciar Allowlist')
                )
            ]
        }),
        createButton: (custom_id, label, style) => new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId(custom_id)
                .setStyle(style)
                .setLabel(label)
        ),
        createResultButtons: (member_id) => new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`approve-${member_id}`)
                    .setStyle(ButtonStyle.Success)
                    .setLabel('Aprovar Whitelist')
                    .setEmoji('‚úÖ'),
                new ButtonBuilder()
                    .setCustomId(`fail-${member_id}`)
                    .setStyle(ButtonStyle.Danger)
                    .setLabel('Reprovar Whitelist')
                    .setEmoji('‚ùå')
            ),
        createTextInput: (question) => {
            const modal = new ModalBuilder()
                .setCustomId(`question-${question.id}`)
                .setTitle(`PERGUNTA ${question.id}/${config.whitelist.questions.length}`);
            const textInput = new TextInputBuilder()
                .setCustomId(`question-${question.id}`)
                .setLabel('Responda atentamente a sua allowlist')
                .setPlaceholder('Escreva sua resposta aqui')
                .setStyle(question.caracteres > 256 ? TextInputStyle.Paragraph : TextInputStyle.Short)
                .setRequired(true)
                .setMinLength(1)
                .setMaxLength(question.caracteres);
            return [modal, textInput];
        },
        formBody: (member_infos, member_id) => ({
            title: 'An√°lise de whitelist',
            color: 0x2f3136,
            description: `Formul√°rio feito por: <@${member_id}>`,
            fields: member_infos.answers,
            timestamp: new Date().toISOString(),
            footer: { text: 'Usu√°rio em an√°lise' }
        }),
        buttonCreateWhitelist: new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('create_whitelist')
                .setPlaceholder('Selecione uma op√ß√£o')
                .addOptions(config.allowlistcategories)
        )
    },
    ticket: {
        closeButton: () => new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('request_close')
                .setEmoji('üîí')
                .setStyle(ButtonStyle.Primary)
                .setLabel('Finalizar Ticket')
        ),
        createTicketButton: () => new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('create_ticket')
                .setPlaceholder('Clique aqui para escolher uma categoria')
                .addOptions(config.ticket.categories)
        )
    },
    useful: {
        embedBuilder: (title, description) => ({
            title,
            color: 0x2f3136,
            description,
            timestamp: new Date().toISOString()
        })
    }
};

function IdentifierGenerator() {
    return 'xxxxxx'.replace(/[xy]/g, (c) => {
        const r = (Math.random() * 16) | 0;
        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);
    });
}